import { Mic, MicOff, PhoneOff, Repeat } from "lucide-react";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useParams } from "react-router-dom";
import { robot_assistant, service1 } from "~/assets";
import { selectCurrentInterviewSession } from "~/redux/interview/interviewSessionSlice";
import Vapi from "@vapi-ai/web";
import { selectCurrentUser } from "~/redux/user/userSlice";
import { toast } from "react-toastify";
import { interviewFeedbackAPI } from "~/redux/interview/feedbackSlice";

const InterviewPage = () => {
    const [activeUser, setActiveUser] = useState(false);
    const [endingCall, setEndingCall] = useState(false);
    const [conversation, setConversation] = useState([]);
    const vapi = new Vapi(import.meta.env.VITE_VAPI_PUBLIC_KEY);
    const dispatch = useDispatch();

    const navigate = useNavigate();

    const currentInterviewSession = useSelector(selectCurrentInterviewSession);
    // console.log(
    //     "üöÄ ~ InterviewPage ~ currentInterviewSession:",
    //     currentInterviewSession
    // );

    const currentUser = useSelector(selectCurrentUser);
    // console.log("üöÄ ~ InterviewPage ~ currentUser:", currentUser);

    useEffect(() => {
        currentInterviewSession && startCall();
    }, [currentInterviewSession]);

    useEffect(() => {
        if (endingCall && conversation.length > 0) {
            generateFeedback();
        }
    }, [conversation]);

    const startCall = () => {
        let questionList = currentInterviewSession?.questions
            .map((q) => q.content)
            .join(", ");
        const assistantOptions = {
            name: "AI Recruiter",
            firstMessage: `Ch√†o ${currentUser?.userName}, b·∫°n ƒë√£ s·∫µn s√†ng cho bu·ªïi ${currentInterviewSession?.title} ch∆∞a?`,

            transcriber: {
                provider: "11labs",
                model: "scribe_v1",
                language: "vi",
            },
            voice: {
                provider: "11labs",
                voiceId: "iSFxP4Z6YNcx9OXl62Ic",
                model: "eleven_flash_v2_5",
                language: "vi",
            },
            model: {
                provider: "openai",
                model: "gpt-4",
                messages: [
                    {
                        role: "system",
                        content: `
                        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI gi·ªçng n√≥i th·ª±c hi·ªán c√°c bu·ªïi ph·ªèng v·∫•n b·∫±ng ti·∫øng Vi·ªát. 
                        Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªèi c√°c c√¢u h·ªèi ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c cung c·∫•p, ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi c·ªßa ·ª©ng vi√™n, 
                        v√† d·∫´n d·∫Øt cu·ªôc tr√≤ chuy·ªán v·ªõi ph·∫ßn gi·ªõi thi·ªáu th√¢n thi·ªán, t·∫°o kh√¥ng kh√≠ tho·∫£i m√°i nh∆∞ng v·∫´n chuy√™n nghi·ªáp. 
                        V√≠ d·ª•: 'Ch√†o b·∫°n! Ch√†o m·ª´ng ƒë·∫øn v·ªõi bu·ªïi ph·ªèng v·∫•n ${currentInterviewSession?.title}. C√πng b·∫Øt ƒë·∫ßu n√†o!' 
                        H·ªèi t·ª´ng c√¢u m·ªôt v√† ch·ªù ph·∫£n h·ªìi t·ª´ ·ª©ng vi√™n tr∆∞·ªõc khi ti·∫øp t·ª•c. 
                        ƒê·∫∑t c√¢u h·ªèi r√µ r√†ng, ng·∫Øn g·ªçn. Danh s√°ch c√¢u h·ªèi: ${questionList}. 
                        N·∫øu ·ª©ng vi√™n l√∫ng t√∫ng, h√£y ƒë∆∞a ra g·ª£i √Ω ho·∫∑c di·ªÖn ƒë·∫°t l·∫°i c√¢u h·ªèi m√† kh√¥ng ti·∫øt l·ªô ƒë√°p √°n. 
                        V√≠ d·ª•: 'C·∫ßn g·ª£i √Ω kh√¥ng? H√£y nghƒ© v·ªÅ c√°ch React qu·∫£n l√Ω vi·ªác c·∫≠p nh·∫≠t component!' 
                        ƒê∆∞a ra ph·∫£n h·ªìi ng·∫Øn g·ªçn, kh√≠ch l·ªá sau m·ªói c√¢u tr·∫£ l·ªùi. 
                        V√≠ d·ª•: 'Hay l·∫Øm! C√¢u tr·∫£ l·ªùi r·∫•t t·ªët.' 
                        Gi·ªØ cu·ªôc tr√≤ chuy·ªán t·ª± nhi√™n, g·∫ßn g≈©i‚Äîs·ª≠ d·ª•ng c√°c c·ª•m t·ª´ nh∆∞ 'N√†o, c√¢u ti·∫øp theo nh√©...' ho·∫∑c 'C√¢u n√†y h∆°i th·ª≠ th√°ch ƒë√¢y!' 
                        Sau 5-7 c√¢u h·ªèi, k·∫øt th√∫c bu·ªïi ph·ªèng v·∫•n m·ªôt c√°ch t·ª± nhi√™n b·∫±ng c√°ch t√≥m t·∫Øt hi·ªáu su·∫•t c·ªßa ·ª©ng vi√™n. 
                        V√≠ d·ª•: 'Tuy·ªát v·ªùi! B·∫°n ƒë√£ tr·∫£ l·ªùi r·∫•t t·ªët, ƒë·∫∑c bi·ªát l√† v·ªõi nh·ªØng c√¢u kh√≥. H√£y ti·∫øp t·ª•c r√®n luy·ªán nh√©!' 
                        K·∫øt th√∫c b·∫±ng m·ªôt c√¢u t√≠ch c·ª±c: 'C·∫£m ∆°n b·∫°n ƒë√£ tham gia! Ch√∫c b·∫°n s·ªõm b·ª©t ph√° trong c√°c d·ª± √°n!' 
                        H∆∞·ªõng d·∫´n ch√≠nh: 
                        ‚úì Th√¢n thi·ªán, g·∫ßn g≈©i, v√† d√≠ d·ªèm 
                        ‚úì Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n nh∆∞ cu·ªôc tr√≤ chuy·ªán th·∫≠t 
                        ‚úì ƒêi·ªÅu ch·ªânh d·ª±a tr√™n m·ª©c ƒë·ªô t·ª± tin c·ªßa ·ª©ng vi√™n 
                        ‚úì ƒê·∫£m b·∫£o bu·ªïi ph·ªèng v·∫•n t·∫≠p trung v√†o React
                    `.trim(),
                    },
                ],
            },
        };

        vapi.start(assistantOptions);
    };

    const stopInterView = () => {
        if (endingCall) return; // tr√°nh double click

        setEndingCall(true);
        vapi.stop();
        toast.info("ƒêang k·∫øt th√∫c cu·ªôc g·ªçi...");
    };

    vapi.on("call-start", () => {
        console.log("Call has started");
        toast.success("Call connected...");
    });

    vapi.on("speech-start", () => {
        console.log("Assistant speech has started");
        setActiveUser(false);
    });

    vapi.on("speech-end", () => {
        console.log("Assistant speech has end");
        setActiveUser(true);
    });

    vapi.on("call-end", () => {
        console.log("Call has end");
        toast.success("Interview ended...");
        setEndingCall(true); // reset l·∫°i tr·∫°ng th√°i
        // navigate("/main");
    });

    vapi.on("message", (message) => {
        if (Array.isArray(message?.conversation)) {
            console.log(message.conversation);

            setConversation(message.conversation.slice(1));
        }
    });

    const generateFeedback = () => {
        // console.log("Sending feedback with conversation:", conversation);
        toast
            .promise(
                dispatch(
                    interviewFeedbackAPI({
                        interviewSession: currentInterviewSession,
                        chatHistory: conversation,
                    })
                ),
                {
                    pending: "ƒêang ch·ªù ƒë·ªÉ g·ª≠i feedback...",
                }
            )
            .then((res) => {
                if (!res.error) {
                    console.log(res);
                }
            });
    };
    return (
        <div className="h-full w-full transition-colors duration-300">
            <div className="container mx-auto px-5 relative z-10">
                {/* Header Section */}
                <div className="flex items-center justify-between mt-30 mb-10">
                    <h1 className="font-extrabold text-4xl text-gray-900 dark:text-white">
                        Ti√™u ƒë·ªÅ c·ªßa ph·ªèng v·∫•n
                    </h1>
                    <div className="rounded-xl py-2 px-2 text-lg  bg-gradient-to-r from-sky-200 to-pink-100 dark:bg-[#24273A] dark:bg-none">
                        Technical
                    </div>
                </div>

                {/* Video Containers */}
                <div className="flex items-center justify-center gap-5 mb-5">
                    {/* Left Box (Robot) */}
                    <div className="w-[40vw] h-[40vh] rounded-2xl flex items-center justify-center border-2 border-purple-300 dark:border-purple-400 relative overflow-hidden">
                        {/* Light Mode Gradient */}
                        <div className="absolute inset-0 bg-gradient-to-br from-sky-200 to-pink-100 dark:hidden" />

                        {/* Dark Mode Gradient */}
                        <div
                            className="absolute inset-0 hidden dark:block"
                            style={{
                                background:
                                    "linear-gradient(0deg, rgba(19, 17, 42, 1) 17%, rgba(24, 21, 55, 1) 63%)",
                            }}
                        />

                    {/* Pulsing Circles */}
                    {!activeUser && (
                        <>
                            <div className="absolute w-[100px] h-[100px] rounded-full bg-purple-400 opacity-30 animate-pulseWave z-0"></div>
                            <div className="absolute w-[100px] h-[100px] rounded-full bg-purple-400 opacity-30 animate-pulseWave z-0"></div>
                            <div className="absolute w-[100px] h-[100px] rounded-full bg-purple-400 opacity-30 animate-pulseWave z-0"></div>
                        </>
                    )}

                        {/* Robot Avatar */}
                        <div
                            className="w-[120px] h-[120px] rounded-full flex items-center justify-center z-10"
                            style={{
                                background:
                                    "radial-gradient(circle, rgba(238, 174, 202, 1) 0%, rgba(148, 187, 233, 1) 87%)",
                            }}
                        >
                            <img
                                src={robot_assistant}
                                alt="robot"
                                className="w-[66px] h-[66px] object-cover"
                            />
                        </div>
                    </div>

                    {/* Right Box (User) */}
                    <div className="w-[40vw] h-[40vh] rounded-2xl flex items-center justify-center border-2 border-gray-300 dark:border-[#4B4D4F66] relative overflow-hidden">
                        {/* Light Mode Gradient */}
                        <div className="absolute inset-0 bg-gradient-to-br from-sky-200 to-pink-100 dark:hidden" />

                        {/* Dark Mode Gradient */}
                        <div
                            className="absolute inset-0 hidden dark:block"
                            style={{
                                background:
                                    "linear-gradient(0deg, rgba(8, 9, 13, 1) 6%, rgba(26, 28, 32, 1) 74%)",
                            }}
                        />

                        <img
                            src={currentUser?.avatar}
                            className="w-[120px] h-[120px] rounded-full z-10"
                        />
                    </div>
                </div>

                <div className="flex items-center justify-center gap-5">
                    <button
                        className={`px-6 py-3 text-white font-semibold rounded-full transition duration-300 flex items-center cursor-pointer 
                            bg-green-500 hover:bg-green-60`}
                >
                    <>
                        <Mic className="mr h-4 w-4" />
                    </>
                </button>

                    <button
                        disabled={endingCall}
                        onClick={stopInterView}
                        className={`px-6 py-3 ${
                            endingCall
                                ? "bg-gray-400 cursor-not-allowed"
                                : "bg-red-500 hover:bg-red-600"
                        } text-white font-semibold rounded-full transition duration-300 flex items-center`}
                    >
                        <PhoneOff className="mr-2 h-4 w-4" />
                        {endingCall ? "ƒêang k·∫øt th√∫c..." : "R·ªùi kh·ªèi ph·ªèng v·∫•n"}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default InterviewPage;
